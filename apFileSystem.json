{
  "jsonFields": [
    "*v1beta1[.]LBListener.spec.port",
    "*v1beta1[.]LBListener.spec.portMax",
    "*v1beta1[.]LBPoolMember.status.healthState",
    "*v1beta1_EndpointGateway.spec.o_virtualEndpoints",
    "*v1beta1_LBPoolMember.status.healthState",
    "Action",
    "Body",
    "CRN",
    "FloatingIP.status.State",
    "FloatingipAddress",
    "HTTP STATUS code",
    "HealthState",
    "Item.Kind",
    "Item.KindName",
    "Item.Name",
    "LBPool unusable",
    "Metering StatusCode",
    "Method",
    "RESPONSESTATUSCODE",
    "RESULT BODY",
    "Reply",
    "StatusCode",
    "_meta.hostname",
    "_method",
    "_path",
    "account",
    "accountid",
    "authElements[0].action",
    "caller",
    "checks interval",
    "code",
    "custom_key",
    "deletionTimestamp",
    "dstObject.kind",
    "dstObject.status.ipv4",
    "elementID",
    "endpoint",
    "error",
    "event.HealthStatus",
    "eventType",
    "event_type",
    "fabconRequestID",
    "feature-name",
    "floatingip",
    "httpRequest.requestMethod",
    "httpRequest.requestUrl",
    "httpRequest.status",
    "httpRequest.userAgent",
    "id",
    "instance name:",
    "kind",
    "latency",
    "listPath",
    "loadBalancerPoolMemberID",
    "load_balancer_pool_member",
    "load_balancer_pool_member.health",
    "load_balancer_pool_member.id",
    "load_balancer_pool_member.port",
    "load_balancer_pool_member.provisioning_status",
    "load_balancer_pool_member.target.id",
    "load_balancer_pool_member.weight",
    "load_balancer_pool_response.protocol",
    "member.status",
    "name",
    "new_status.powerState",
    "new_status.state",
    "numOfCerts",
    "object.kind",
    "object.spec.target.dnsdomain",
    "parameters",
    "path",
    "poolMemObj: .spec.protocolPort",
    "poolMemObj: .status.healthState",
    "provisioning_status",
    "proxyUpstreamName",
    "reason",
    "regionalMetav1Object.metadata.name",
    "regionalObject.kind",
    "regionalObject.metadata.deletionTimestamp",
    "regionalObject.spec.protocolPort",
    "regionalObject.status.healthState",
    "regionalObjectUpdateReq.kind",
    "regionalStatus.kind",
    "regionalStatus.spec.protocolPort",
    "regionalStatus.status.healthState",
    "regionalStatusUpdateReq.kind",
    "regionalVirtualEndpoints",
    "reqid",
    "resourceType",
    "resource_type",
    "resp",
    "restmodel FloatingIP.status",
    "serviceID",
    "srcIP",
    "srcObject.kind",
    "start_time",
    "status",
    "status_code",
    "token_iam_id",
    "totalEGWcount",
    "uri",
    "url",
    "userAgent",
    "user_agent",
    "verb",
    "vpcId",
    "zonalObject.kind",
    "zonalObject.metadata.deletionTimestamp",
    "zonalObject.status.healthState",
    "zonalObject.status.primaryZoneReady",
    "zonalObjectCreateReq.metadata.name",
    "zonalObjectUpdateReq.spec.o_virtualEndpoints",
    "zone"
  ],
  "method": "advanced",
  "jsonLogScript": "// Function called to extract date, level, app name and message\n//\n// @param preJSONString: string - optional non-JSON string proceeding JSON object\n// @param jsonObject: {} - JSON log data\n// @returns {date: Date, level: string, category: string, appName: string, message: string, additionalJSON: {} }\n//\n// category is the availability zone\n// appName is the pod name\n//\nconst extractDateLevelCategoryAppNameMessage = function (preJSONString, jsonObject) {\n    let date = new Date();\n    let level = jsonObject && jsonObject.level ? jsonObject.level : 'info';\n    let category = '';\n    let appName = '';\n    let message = '';\n    if (jsonObject.MESSAGE) message = jsonObject.MESSAGE;\n    else if (jsonObject.message) message = jsonObject.message;\n    else if (jsonObject.msg) message = jsonObject.msg;\n\n    function parsePod(pod) {\n        const podParts = pod.split('-');\n        if (podParts.length > 1) {\n            podParts.pop();\n        }\n        return podParts.join('-');\n    }\n\n    if (jsonObject.request_time) {\n       date = new Date(jsonObject.request_time);\n    } else if (jsonObject._file) {\n        if (jsonObject.msg_timestamp) {\n            date = new Date(jsonObject.msg_timestamp);\n        } else if (jsonObject._ts) {\n            date = new Date(jsonObject._ts);\n        }\n\n        if (jsonObject.pod) {\n            appName = parsePod(jsonObject.pod);\n        } else if (jsonObject._file) {\n            if (jsonObject._host) {\n                category = jsonObject._host;\n            }\n            appName += parsePod(jsonObject._file);\n        }\n    } else {\n        const tokens = preJSONString.split(' ', 5);\n        if (tokens.length >= 3) {\n            date = new Date(tokens.slice(0, 3).join(' '));\n        }\n        if (jsonObject.msg_timestamp) {\n            date = new Date(jsonObject.msg_timestamp);\n        } else if (jsonObject._ts) {\n            date = new Date(jsonObject._ts);\n        }\n        if (tokens.length >= 4) {\n            let pod = tokens[3];\n            if (pod.startsWith('mzone')) {\n                if (tokens.length >= 5) {\n                    pod = tokens[4];\n                    category = tokens[3];\n                }\n            }\n            appName += parsePod(pod);\n        }\n    }\n    if (jsonObject.Worker !== undefined) {\n        appName += ' worker' + jsonObject.Worker;\n    }\n\n    let additionalJSON = {};\n\n    if (Object.keys(jsonObject).length === 0) {\n        const i = preJSONString.indexOf('verb=');\n        if (i !== -1) {\n            const keyValues = preJSONString.substring(i).split(' ');\n            for (const kv of keyValues) {\n                const parts = kv.split('=');\n                additionalJSON[parts[0]] = parts[1];\n            }\n        }\n    } else if (appName.indexOf('sys.journal') !== -1 && jsonObject.message !== undefined) {\n        try {\n            additionalJSON = JSON.parse(jsonObject.message);\n            if (additionalJSON.msg !== undefined) message = additionalJSON.msg;\n        } catch(e) {}\n    }\n\n    if (jsonObject.REQUESTPAYLOADSTRING !== undefined) {\n        try {\n            const payload = JSON.parse(jsonObject.REQUESTPAYLOADSTRING);\n            jsonObject.event_type = payload.event_type;\n        } catch(e) {}\n    }\n\n    return { date, level, category, appName, message, additionalJSON };\n}",
  "queries": {},
  "briefJsonFields": "{\"caller\":true,\"_method\":true,\"_path\":true,\"status_code\":true,\"StatusCode\":true,\"status\":true}",
  "jsonSubQueries": "[{\"name\":\"Fabcon Edge Manager\",\"enabled\":true,\"filter\":\"app:fabcon-edge-manager\",\"searchFilter\":\"app:fabcon-edge-manager\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Fabcon Manager\",\"enabled\":true,\"filter\":\"app:fabcon-manager\",\"searchFilter\":\"app:fabcon-manager\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"GRPC\",\"enabled\":true,\"filter\":\"(message:grpc called OR message:grpc handler complete)\",\"searchFilter\":\"(message:grpc called OR message:grpc handler complete)\",\"boolString\":\"(###0||###1)\",\"boolOperands\":[\"message:grpc called\",\"message:grpc handler complete\"],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Handlers\",\"enabled\":true,\"filter\":\"(message:handler called OR message:handler complete)\",\"searchFilter\":\"(message:handler called OR message:handler complete)\",\"boolString\":\"(###0||###1)\",\"boolOperands\":[\"message:handler called\",\"message:handler complete\"],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Kail Health Monitor\",\"enabled\":true,\"filter\":\"message:Kali AND (Status:FAILED OR event.HealthStatus:*)\",\"searchFilter\":\"message:Kali AND (Status:FAILED OR event.HealthStatus:*)\",\"boolString\":\"###0&&(###1||###2)\",\"boolOperands\":[\"message:Kali\",\"Status:FAILED\",\"event.HealthStatus:*\"],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"level:err\",\"enabled\":true,\"filter\":\"level:err\",\"searchFilter\":\"level:err\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Locking\",\"enabled\":true,\"filter\":\"caller:locking\",\"searchFilter\":\"caller:locking\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Network Manager\",\"enabled\":true,\"filter\":\"app:network-manater\",\"searchFilter\":\"app:network-manater\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Nginx\",\"enabled\":true,\"filter\":\"app:nginx\",\"searchFilter\":\"app:nginx\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Regional DNLB\",\"enabled\":true,\"filter\":\"app:regional-dnlb\",\"searchFilter\":\"app:regional-dnlb\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Regional Network\",\"enabled\":true,\"filter\":\"app:regional-network\",\"searchFilter\":\"app:regional-network\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Request completed\",\"enabled\":true,\"filter\":\"message:request completed\",\"searchFilter\":\"message:request completed\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]}]",
  "jsonQueries": "[{\"name\":\"API Query\",\"enabled\":true,\"filter\":\"(message:request completed OR (message:grpc called OR message:grpc handler complete) OR (message:handler called OR message:handler complete) OR caller:locking OR level:err)\",\"searchFilter\":\"(message:request completed OR (message:grpc called OR message:grpc handler complete) OR (message:handler called OR message:handler complete) OR caller:locking OR level:err)\",\"boolString\":\"(###0||(###1||###2)||(###3||###4)||###5||###6)\",\"boolOperands\":[\"message:request completed\",\"message:grpc called\",\"message:grpc handler complete\",\"message:handler called\",\"message:handler complete\",\"caller:locking\",\"level:err\"],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Error: 401 or 403\",\"enabled\":true,\"filter\":\"status_code:401 OR status_code:403\",\"searchFilter\":\"status_code:401 OR status_code:403\",\"boolString\":\"###0||###1\",\"boolOperands\":[\"status_code:401\",\"status_code:403\"],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Error: 5xx\",\"enabled\":true,\"filter\":\"status_code:>=500\",\"searchFilter\":\"status_code:>=500\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Errors\",\"enabled\":true,\"filter\":\"level:err OR error:*\",\"searchFilter\":\"level:err OR error:*\",\"boolString\":\"###0||###1\",\"boolOperands\":[\"level:err\",\"error:*\"],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Latency > 60 seconds\",\"enabled\":true,\"filter\":\"request completed AND latency:>60\",\"searchFilter\":\"request completed AND latency:>60\",\"boolString\":\"###0&&###1\",\"boolOperands\":[\"request completed\",\"latency:>60\"],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"leaked load balancer\",\"enabled\":true,\"filter\":\"vip already exists\",\"searchFilter\":\"vip already exists\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"Member Health\",\"enabled\":true,\"filter\":\"(((poolMemObj: .status.healthState:* AND Process Item) OR (kali AND (event.HealthStatus:* OR Status:*)) OR load_balancer_pool_member.health:* OR (updating virtual machine AND new_status.state:*)))\",\"searchFilter\":\"(((poolMemObj: .status.healthState:* AND Process Item) OR (kali AND (event.HealthStatus:* OR Status:*)) OR load_balancer_pool_member.health:* OR (updating virtual machine AND new_status.state:*)))\",\"boolString\":\"(((###0&&###1)||(###2&&(###3||###4))||###5||(###6&&###7)))\",\"boolOperands\":[\"poolMemObj: .status.healthState:*\",\"Process Item\",\"kali\",\"event.HealthStatus:*\",\"Status:*\",\"load_balancer_pool_member.health:*\",\"updating virtual machine\",\"new_status.state:*\"],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]},{\"name\":\"stuck\",\"enabled\":true,\"filter\":\"stuck\",\"searchFilter\":\"stuck\",\"boolString\":\"\",\"boolOperands\":[],\"_matchCase\":false,\"_regex\":false,\"_logical\":true,\"_deleteFiltered\":false,\"showErrors\":false,\"excludeTags\":[],\"_excludeMatchCase\":false,\"sideBarProtocols\":[],\"sideBarDomains\":[],\"sideBarUserAgents\":[],\"sideBarStatuses\":[],\"dedup\":false,\"dedupMap\":{},\"pendingDedupMap\":{},\"sortByKeys\":[]}]"
}